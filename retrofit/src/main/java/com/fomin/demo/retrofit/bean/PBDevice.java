// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: network.proto
package com.fomin.demo.retrofit.bean;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 设备
 */
public final class PBDevice extends Message<PBDevice, PBDevice.Builder> {
  public static final ProtoAdapter<PBDevice> ADAPTER = new ProtoAdapter_PBDevice();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_DEVICEID = "";

  public static final String DEFAULT_DEVICEOS = "";

  public static final String DEFAULT_DEVICEMODEL = "";

  public static final PBDeviceType DEFAULT_DEVICETYPE = PBDeviceType.DEVICE_ANDROID;

  /**
   * 设备ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String deviceId;

  /**
   * 设备操作系统
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String deviceOs;

  /**
   * 设备模型
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String deviceModel;

  /**
   * 设备类型，参考PBDeviceType
   */
  @WireField(
      tag = 4,
      adapter = "com.fomin.demo.retrofit.bean.PBDeviceType#ADAPTER"
  )
  public final PBDeviceType deviceType;

  public PBDevice(String deviceId, String deviceOs, String deviceModel, PBDeviceType deviceType) {
    this(deviceId, deviceOs, deviceModel, deviceType, ByteString.EMPTY);
  }

  public PBDevice(String deviceId, String deviceOs, String deviceModel, PBDeviceType deviceType,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.deviceId = deviceId;
    this.deviceOs = deviceOs;
    this.deviceModel = deviceModel;
    this.deviceType = deviceType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.deviceId = deviceId;
    builder.deviceOs = deviceOs;
    builder.deviceModel = deviceModel;
    builder.deviceType = deviceType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PBDevice)) return false;
    PBDevice o = (PBDevice) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(deviceId, o.deviceId)
        && Internal.equals(deviceOs, o.deviceOs)
        && Internal.equals(deviceModel, o.deviceModel)
        && Internal.equals(deviceType, o.deviceType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (deviceId != null ? deviceId.hashCode() : 0);
      result = result * 37 + (deviceOs != null ? deviceOs.hashCode() : 0);
      result = result * 37 + (deviceModel != null ? deviceModel.hashCode() : 0);
      result = result * 37 + (deviceType != null ? deviceType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (deviceId != null) builder.append(", deviceId=").append(deviceId);
    if (deviceOs != null) builder.append(", deviceOs=").append(deviceOs);
    if (deviceModel != null) builder.append(", deviceModel=").append(deviceModel);
    if (deviceType != null) builder.append(", deviceType=").append(deviceType);
    return builder.replace(0, 2, "PBDevice{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PBDevice, Builder> {
    public String deviceId;

    public String deviceOs;

    public String deviceModel;

    public PBDeviceType deviceType;

    public Builder() {
    }

    /**
     * 设备ID
     */
    public Builder deviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    /**
     * 设备操作系统
     */
    public Builder deviceOs(String deviceOs) {
      this.deviceOs = deviceOs;
      return this;
    }

    /**
     * 设备模型
     */
    public Builder deviceModel(String deviceModel) {
      this.deviceModel = deviceModel;
      return this;
    }

    /**
     * 设备类型，参考PBDeviceType
     */
    public Builder deviceType(PBDeviceType deviceType) {
      this.deviceType = deviceType;
      return this;
    }

    @Override
    public PBDevice build() {
      return new PBDevice(deviceId, deviceOs, deviceModel, deviceType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PBDevice extends ProtoAdapter<PBDevice> {
    public ProtoAdapter_PBDevice() {
      super(FieldEncoding.LENGTH_DELIMITED, PBDevice.class);
    }

    @Override
    public int encodedSize(PBDevice value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.deviceId)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.deviceOs)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.deviceModel)
          + PBDeviceType.ADAPTER.encodedSizeWithTag(4, value.deviceType)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PBDevice value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.deviceId);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.deviceOs);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.deviceModel);
      PBDeviceType.ADAPTER.encodeWithTag(writer, 4, value.deviceType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PBDevice decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.deviceId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.deviceOs(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.deviceModel(ProtoAdapter.STRING.decode(reader)); break;
          case 4: {
            try {
              builder.deviceType(PBDeviceType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PBDevice redact(PBDevice value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
