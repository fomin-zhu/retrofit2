// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: network.proto
package com.fomin.demo.retrofit.bean;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 消息响应包
 */
public final class PBResponse extends Message<PBResponse, PBResponse.Builder> {
  public static final ProtoAdapter<PBResponse> ADAPTER = new ProtoAdapter_PBResponse();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  public static final ByteString DEFAULT_MESSAGEDATA = ByteString.EMPTY;

  public static final Integer DEFAULT_RESULTCODE = 0;

  public static final String DEFAULT_RESULTINFO = "";

  /**
   * 消息类型
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  /**
   * 返回数据
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString messageData;

  /**
   * 返回的结果码
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer resultCode;

  /**
   * 返回的结果消息提示文本（用于错误提示）
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String resultInfo;

  public PBResponse(Integer type, ByteString messageData, Integer resultCode, String resultInfo) {
    this(type, messageData, resultCode, resultInfo, ByteString.EMPTY);
  }

  public PBResponse(Integer type, ByteString messageData, Integer resultCode, String resultInfo,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.messageData = messageData;
    this.resultCode = resultCode;
    this.resultInfo = resultInfo;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.messageData = messageData;
    builder.resultCode = resultCode;
    builder.resultInfo = resultInfo;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PBResponse)) return false;
    PBResponse o = (PBResponse) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(type, o.type)
        && Internal.equals(messageData, o.messageData)
        && Internal.equals(resultCode, o.resultCode)
        && Internal.equals(resultInfo, o.resultInfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (messageData != null ? messageData.hashCode() : 0);
      result = result * 37 + (resultCode != null ? resultCode.hashCode() : 0);
      result = result * 37 + (resultInfo != null ? resultInfo.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (type != null) builder.append(", type=").append(type);
    if (messageData != null) builder.append(", messageData=").append(messageData);
    if (resultCode != null) builder.append(", resultCode=").append(resultCode);
    if (resultInfo != null) builder.append(", resultInfo=").append(resultInfo);
    return builder.replace(0, 2, "PBResponse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PBResponse, Builder> {
    public Integer type;

    public ByteString messageData;

    public Integer resultCode;

    public String resultInfo;

    public Builder() {
    }

    /**
     * 消息类型
     */
    public Builder type(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 返回数据
     */
    public Builder messageData(ByteString messageData) {
      this.messageData = messageData;
      return this;
    }

    /**
     * 返回的结果码
     */
    public Builder resultCode(Integer resultCode) {
      this.resultCode = resultCode;
      return this;
    }

    /**
     * 返回的结果消息提示文本（用于错误提示）
     */
    public Builder resultInfo(String resultInfo) {
      this.resultInfo = resultInfo;
      return this;
    }

    @Override
    public PBResponse build() {
      return new PBResponse(type, messageData, resultCode, resultInfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PBResponse extends ProtoAdapter<PBResponse> {
    public ProtoAdapter_PBResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, PBResponse.class);
    }

    @Override
    public int encodedSize(PBResponse value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.type)
          + ProtoAdapter.BYTES.encodedSizeWithTag(2, value.messageData)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.resultCode)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.resultInfo)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PBResponse value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.messageData);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.resultCode);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.resultInfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PBResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.type(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.messageData(ProtoAdapter.BYTES.decode(reader)); break;
          case 3: builder.resultCode(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.resultInfo(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PBResponse redact(PBResponse value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
