// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: network.proto
package com.fomin.demo.retrofit.bean;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 消息请求包
 */
public final class PBRequest extends Message<PBRequest, PBRequest.Builder> {
  public static final ProtoAdapter<PBRequest> ADAPTER = new ProtoAdapter_PBRequest();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  public static final ByteString DEFAULT_MESSAGEDATA = ByteString.EMPTY;

  public static final Long DEFAULT_TIMESTAMP = 0L;

  /**
   * 消息类型
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer type;

  /**
   * 请求数据
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString messageData;

  /**
   * 客户端时间戳
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long timestamp;

  /**
   * APP信息
   */
  @WireField(
      tag = 4,
      adapter = "com.fomin.demo.retrofit.bean.PBAppInfo#ADAPTER"
  )
  public final PBAppInfo appInfo;

  public PBRequest(Integer type, ByteString messageData, Long timestamp, PBAppInfo appInfo) {
    this(type, messageData, timestamp, appInfo, ByteString.EMPTY);
  }

  public PBRequest(Integer type, ByteString messageData, Long timestamp, PBAppInfo appInfo,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.messageData = messageData;
    this.timestamp = timestamp;
    this.appInfo = appInfo;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.messageData = messageData;
    builder.timestamp = timestamp;
    builder.appInfo = appInfo;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PBRequest)) return false;
    PBRequest o = (PBRequest) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(type, o.type)
        && Internal.equals(messageData, o.messageData)
        && Internal.equals(timestamp, o.timestamp)
        && Internal.equals(appInfo, o.appInfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (messageData != null ? messageData.hashCode() : 0);
      result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
      result = result * 37 + (appInfo != null ? appInfo.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (type != null) builder.append(", type=").append(type);
    if (messageData != null) builder.append(", messageData=").append(messageData);
    if (timestamp != null) builder.append(", timestamp=").append(timestamp);
    if (appInfo != null) builder.append(", appInfo=").append(appInfo);
    return builder.replace(0, 2, "PBRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PBRequest, Builder> {
    public Integer type;

    public ByteString messageData;

    public Long timestamp;

    public PBAppInfo appInfo;

    public Builder() {
    }

    /**
     * 消息类型
     */
    public Builder type(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 请求数据
     */
    public Builder messageData(ByteString messageData) {
      this.messageData = messageData;
      return this;
    }

    /**
     * 客户端时间戳
     */
    public Builder timestamp(Long timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    /**
     * APP信息
     */
    public Builder appInfo(PBAppInfo appInfo) {
      this.appInfo = appInfo;
      return this;
    }

    @Override
    public PBRequest build() {
      return new PBRequest(type, messageData, timestamp, appInfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PBRequest extends ProtoAdapter<PBRequest> {
    public ProtoAdapter_PBRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, PBRequest.class);
    }

    @Override
    public int encodedSize(PBRequest value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.type)
          + ProtoAdapter.BYTES.encodedSizeWithTag(2, value.messageData)
          + ProtoAdapter.UINT64.encodedSizeWithTag(3, value.timestamp)
          + PBAppInfo.ADAPTER.encodedSizeWithTag(4, value.appInfo)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PBRequest value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.messageData);
      ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.timestamp);
      PBAppInfo.ADAPTER.encodeWithTag(writer, 4, value.appInfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PBRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.type(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.messageData(ProtoAdapter.BYTES.decode(reader)); break;
          case 3: builder.timestamp(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.appInfo(PBAppInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PBRequest redact(PBRequest value) {
      Builder builder = value.newBuilder();
      if (builder.appInfo != null) builder.appInfo = PBAppInfo.ADAPTER.redact(builder.appInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
